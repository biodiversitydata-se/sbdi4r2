[{"path":"/articles/intro.html","id":"using-sbdi4r2","dir":"Articles","previous_headings":"","what":"Using sbdi4r2","title":"Introduction to sbdi4r2","text":"Let’s assume already installed package shown main site. Load sbdi4r2 package: , check additional packages ’ll use examples, install necessary.","code":"library(sbdi4r2) sbdi_config(email = \"your.email@mail.com\") to_install <- c( \"dplyr\", \"ggplot2\", \"htmlTable\", \"lubridate\", \"leaflet\",                   \"maps\", \"mapdata\", \"phytools\", \"sf\",  \"tidyverse\", \"vegan\")  to_install <- to_install[!sapply(to_install, requireNamespace, quietly = TRUE)] if (length(to_install) > 0)     install.packages(to_install, repos = \"http://cran.us.r-project.org\")"},{"path":"/articles/intro.html","id":"example-1-name-searching-and-taxonomic-trees","dir":"Articles","previous_headings":"","what":"Example 1: Name searching and taxonomic trees","title":"Introduction to sbdi4r2","text":"want look taxonomy Crested tit (Lophophanes cristatus), don’t know correct scientific name , let’s search : see non-birds also returned, e.g. insects (Neuroctenus parus). want restrict search family Paridae, filter hybrids genus (genus == NA). find ? can make taxonomic tree plot using phytools package:","code":"sx <- sbdi_call() |>          sbdi_identify(\"parus\") |>          atlas_species() sx #> # A tibble: 6 × 11 #>   taxon_concept_id species_name scientific_name_auth…¹ taxon_rank kingdom phylum #>              <dbl> <chr>        <chr>                  <chr>      <chr>   <chr>  #> 1          9705453 Parus major  Linnaeus, 1758         species    Animal… Chord… #> 2          4409010 Parus monta… Conrad von Baldenstei… species    Animal… Chord… #> 3          2487931 Parus afer   Gmelin, 1789           species    Animal… Chord… #> 4          2487941 Parus niger  Vieillot, 1818         species    Animal… Chord… #> 5          2487926 Parus rufiv… Bocage, 1877           species    Animal… Chord… #> 6          2487946 Parus grise… Reichenow, 1882        species    Animal… Chord… #> # ℹ abbreviated name: ¹​scientific_name_authorship #> # ℹ 5 more variables: class <chr>, order <chr>, family <chr>, genus <chr>, #> #   vernacular_name <chr> sx <- sbdi_call() |>          sbdi_identify(\"paridae\") |>          atlas_species() |>          filter(!is.na(genus)) |>          as.data.frame() sx #>    taxon_concept_id                 species_name     scientific_name_authorship #> 1           9705453                  Parus major                 Linnaeus, 1758 #> 2           2487879          Cyanistes caeruleus               (Linnaeus, 1758) #> 3           2487843            Poecile palustris               (Linnaeus, 1758) #> 4           2487871               Periparus ater               (Linnaeus, 1758) #> 5           2487866             Poecile montanus (Conrad von Baldenstein, 1827) #> 6           2487883        Lophophanes cristatus               (Linnaeus, 1758) #> 7           2487862              Poecile cinctus               (Boddaert, 1783) #> 8          10525787 Cyanistes cyanus x caeruleus                           <NA> #> 9           2487877             Cyanistes cyanus                 (Pallas, 1770) #> 10          4409010               Parus montanus   Conrad von Baldenstein, 1827 #> 11          2487805         Poecile atricapillus               (Linnaeus, 1766) #> 12         10308870   Poecile cinctus x montanus                           <NA> #> 13          2487931                   Parus afer                   Gmelin, 1789 #> 14          2487941                  Parus niger                 Vieillot, 1818 #> 15          2487793           Poecile hudsonicus            (J.R.Forster, 1772) #> 16          2487857             Poecile lugubris               (Temminck, 1820) #> 17          2487887           Baeolophus bicolor               (Linnaeus, 1766) #> 18          2487926            Parus rufiventris                   Bocage, 1877 #> 19          2487946          Parus griseiventris                Reichenow, 1882 #>    taxon_rank  kingdom   phylum class         order  family       genus #> 1     species Animalia Chordata  Aves Passeriformes Paridae       Parus #> 2     species Animalia Chordata  Aves Passeriformes Paridae   Cyanistes #> 3     species Animalia Chordata  Aves Passeriformes Paridae     Poecile #> 4     species Animalia Chordata  Aves Passeriformes Paridae   Periparus #> 5     species Animalia Chordata  Aves Passeriformes Paridae     Poecile #> 6     species Animalia Chordata  Aves Passeriformes Paridae Lophophanes #> 7     species Animalia Chordata  Aves Passeriformes Paridae     Poecile #> 8     species Animalia Chordata  Aves Passeriformes Paridae   Cyanistes #> 9     species Animalia Chordata  Aves Passeriformes Paridae   Cyanistes #> 10    species Animalia Chordata  Aves Passeriformes Paridae       Parus #> 11    species Animalia Chordata  Aves Passeriformes Paridae     Poecile #> 12    species Animalia Chordata  Aves Passeriformes Paridae     Poecile #> 13    species Animalia Chordata  Aves Passeriformes Paridae       Parus #> 14    species Animalia Chordata  Aves Passeriformes Paridae       Parus #> 15    species Animalia Chordata  Aves Passeriformes Paridae     Poecile #> 16    species Animalia Chordata  Aves Passeriformes Paridae     Poecile #> 17    species Animalia Chordata  Aves Passeriformes Paridae  Baeolophus #> 18    species Animalia Chordata  Aves Passeriformes Paridae       Parus #> 19    species Animalia Chordata  Aves Passeriformes Paridae       Parus #>                       vernacular_name #> 1                           Great Tit #> 2                   Eurasian Blue Tit #> 3                           Marsh Tit #> 4                            Coal Tit #> 5                          Willow Tit #> 6                         Crested Tit #> 7               Gray-headed Chickadee #> 8                Azure Tit x Blue Tit #> 9                           Azure Tit #> 10                         willow tit #> 11             Black-Capped Chickadee #> 12 Grey-headed Chickadee x Willow Tit #> 13                           Gray Tit #> 14                 Southern Black-Tit #> 15                   Boreal Chickadee #> 16                         Sombre Tit #> 17                 Sennett'S Titmouse #> 18                 Rufous-bellied Tit #> 19                         Miombo Tit library(phytools) ## as.phylo requires the taxonomic columns to be factors sx$genus <- as.factor(sx$genus) sx$species_name <- as.factor(sx$species_name) sx$vernacular_name <- as.factor(sx$vernacular_name)  ## create phylo object of canonical name nested within Genus ax <- as.phylo(~genus/species_name, data = sx) plotTree(ax, fsize = 0.7, ftype=\"i\") ## plot it"},{"path":"/articles/intro.html","id":"example-2-get-some-data-and-work-it-out","dir":"Articles","previous_headings":"","what":"Example 2: Get some data and work it out","title":"Introduction to sbdi4r2","text":"Let’s filter, get quality assertions, plot data map save . First let’s download occurrence data “Sommarlånke” view top data table: can also search set species simultaneously.","code":"library(dplyr) #>  #> Attaching package: 'dplyr' #> The following object is masked from 'package:ape': #>  #>     where #> The following object is masked from 'package:galah': #>  #>     desc #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(htmlTable)  focal_spp <- search_taxa(\"Callitriche cophocarpa\") ## or equally valid focal_spp <- search_taxa(\"sommarlånke\") focal_spp$taxon_concept_id #> [1] \"8236752\"  x <- sbdi_call() |>    sbdi_identify(\"Callitriche cophocarpa\") |>   atlas_occurrences() #> Request for 614 occurrences placed in queue #> Current queue length: 1 #> -- #> Downloading  x |>    pull(dataResourceName) |>    table() |>    as.data.frame() |>    rename(\"Source\" = Var1) |>    htmlTable() taxa <- c(\"Callitriche\", \"Anarrhinum\") x <- sbdi_call() |>    sbdi_identify(taxa) |>   atlas_occurrences() #> ---  x |>    pull(dataResourceName) |>    table() |>    as.data.frame() |>    rename(\"Source\" = Var1) |>    htmlTable()"},{"path":"/articles/intro.html","id":"search-filters","dir":"Articles","previous_headings":"Example 2: Get some data and work it out","what":"Search filters","title":"Introduction to sbdi4r2","text":"different data sources. Let’s assume need see data one source, e.g. Lund University Biological Museum - Botanical collection (LD), just happen know UID “dr2” (find later):","code":"taxa <- \"Callitriche cophocarpa\" xf <- sbdi_call() |>   sbdi_identify(taxa) |>   filter(dataResourceUid == \"dr2\") |>   atlas_occurrences() #> --  xf |>    pull(dataResourceName) |>    table() |>    as.data.frame() |>    rename(\"Source\" = Var1) |>    htmlTable()"},{"path":"/articles/intro.html","id":"what-to-search-for","dir":"Articles","previous_headings":"Example 2: Get some data and work it out","what":"What to search for?","title":"Introduction to sbdi4r2","text":"package offers function show_all_fields() help know fields can query. many help functions, check ?show_all(). example, SBDI fields starting “cl” spatial layers. can use spatial layers available spatially search indexed observations. Note fundamentally different filtering county=Uppsala search text Uppsala field county, rather spatially matching observations. [DEVELOPED] Otherwise, can search available data resources, collections () using interactive function pick_filter. pick_filter function lets explore data collections, spatial layers. Soon indexed fields. search filtered indexed field (.k.. column variable). example, let’s filter observations coordinate uncertainty smaller equal 100 m. One search observations specific years: way, one search observations two years:  Likewise, search conditions can accumulated treated conditions:  , occurrences filtered basis record (, observation recorded): last example introduce use select(). function control columns retrieve atlas. default, minimum set columns pre-selected. field can search can retrieved. See function ?sbdi_select()","code":"show_all(fields) show_all(fields) |>    filter(grepl(\"cl\", id)) |>     as.data.frame() |>    head(10) #>         id                         description   type #> 1  cl10038             Sweden-Country Boundary fields #> 2  cl10040                            Kommuner fields #> 3  cl10041                         FA-regioner fields #> 4  cl10042                         LA-regioner fields #> 5  cl10046                               Sjöar fields #> 6  cl10047                          Kustvatten fields #> 7  cl10048                         Grundvatten fields #> 8  cl10050    Nyckelbiotoper - Storskogsbruket fields #> 9  cl10051              Gräns för contortatall fields #> 10 cl10052 Terrestrial Ecoregions of the World fields show_all(fields) |>    filter(description == \"Län\") |>    as.data.frame()  xf <- sbdi_call() |>    sbdi_identify(taxa) |>   filter(\"cl10097\" == \"Uppsala\") |>   atlas_occurrences() xf <- sbdi_call() |>    sbdi_identify(taxa) |>   filter(coordinateUncertaintyInMeters <= 100) |>   atlas_occurrences() x2yr <- sbdi_call() |>    sbdi_identify(taxa) |>   filter(year == 2010 | year == 2020) |>   atlas_occurrences() xf <- sbdi_call() |>    sbdi_identify(taxa) |>   filter(year >= 2010, year <= 2020) |>   atlas_occurrences() #> --  library(lubridate) hist(year(xf$eventDate), xlab = \"Year\", main = \"\") #> -- xbor <- sbdi_call() |>    sbdi_identify(taxa) |>   filter(basisOfRecord == \"PreservedSpecimen\") |>   select(basisOfRecord, group = \"basic\") |>    atlas_occurrences() #> --"},{"path":"/articles/intro.html","id":"quality-assertions","dir":"Articles","previous_headings":"Example 2: Get some data and work it out","what":"Quality assertions","title":"Introduction to sbdi4r2","text":"Data quality assertions suite fields result set tests performed data. continue using data Blunt-fruited Water-starwort get summary data quality assertions, can see list record issues using show_all(assertions) see considered fatal quality issues, category = “Error” “Warning”.","code":"show_all(assertions) #> # A tibble: 114 × 4 #>    id                                 description                 category type  #>    <chr>                              <chr>                       <chr>    <chr> #>  1 AMBIGUOUS_COLLECTION               Ambiguous collection        Warning  asse… #>  2 AMBIGUOUS_INSTITUTION              Ambiguous institution       Warning  asse… #>  3 BASIS_OF_RECORD_INVALID            Basis of record badly form… Warning  asse… #>  4 biosecurityIssue                   Biosecurity issue           Error    asse… #>  5 COLLECTION_MATCH_FUZZY             Collection match fuzzy      Warning  asse… #>  6 COLLECTION_MATCH_NONE              Collection not matched      Warning  asse… #>  7 CONTINENT_COUNTRY_MISMATCH         Continent country mismatch  Warning  asse… #>  8 CONTINENT_DERIVED_FROM_COORDINATES Continent derived from coo… Warning  asse… #>  9 CONTINENT_INVALID                  Continent invalid           Warning  asse… #> 10 COORDINATE_INVALID                 Coordinate invalid          Warning  asse… #> # ℹ 104 more rows search_all(assertions, \"longitude\") #> # A tibble: 2 × 4 #>   id                             description                      category type  #>   <chr>                          <chr>                            <chr>    <chr> #> 1 PRESUMED_NEGATED_LONGITUDE     Longitude is negated             Warning  asse… #> 2 COORDINATE_REPROJECTION_FAILED Decimal latitude/longitude conv… Warning  asse…  assertError <- show_all(assertions) |>    filter(category == \"Error\")  xassert <- sbdi_call() |>    sbdi_identify(taxa) |>   select(assertError$id) |>    atlas_occurrences() #> Request for 614 occurrences placed in queue #> Current queue length: 1 #> -- #> Downloading #> Warning: The following fields were downloaded, but weren't requested in your query: #> • recordID #> • dataResourceUid #> • dataResourceName #> • dcterms:license #> • catalogNumber #> • taxonConceptID #> • raw_scientificName #> • raw_vernacularName #> • scientificName #> • taxonRank #> • vernacularName #> • kingdom #> • phylum #> • class #> • order #> • family #> • genus #> • species #> • subspecies #> • institutionCode #> • collectionCode #> • raw_locality #> • raw_decimalLatitude #> • raw_decimalLongitude #> • raw_geodeticDatum #> • decimalLatitude #> • decimalLongitude #> • coordinatePrecision #> • coordinateUncertaintyInMeters #> • country #> • stateProvince #> • minimumElevationInMeters #> • maximumElevationInMeters #> • minimumDepthInMeters #> • maximumDepthInMeters #> • individualCount #> • recordedBy #> • year #> • month #> • day #> • verbatimEventDate #> • basisOfRecord #> • raw_basisOfRecord #> • sex #> • preparations #> • informationWithheld #> • dataGeneralizations #> • outlierLayer  assert_count <- colSums(xassert[,assertError$id]) assert_count #>                biosecurityIssue                 detectedOutlier  #>                               0                               0  #>                 habitatMismatch         identificationIncorrect  #>                               0                               0  #>            INTERPRETATION_ERROR      SENSITIVITY_REPORT_INVALID  #>                               0                               0  #> SENSITIVITY_REPORT_NOT_LOADABLE                  taxonomicIssue  #>                               0                               0  #>                   temporalIssue    UNRECOGNISED_COLLECTION_CODE  #>                               0                               0  #>   UNRECOGNISED_INSTITUTION_CODE              userAssertionOther  #>                               0                               0  assertWarning <- show_all(assertions) |>    filter(category == \"Warning\")  xassert <- sbdi_call() |>    sbdi_identify(taxa) |>   select(all_of(assertWarning$id)) |>    atlas_occurrences() #> Request for 614 occurrences placed in queue #> Current queue length: 1 #> -- #> Downloading #> Warning: The following fields were downloaded, but weren't requested in your query: #> • recordID #> • dataResourceUid #> • dataResourceName #> • dcterms:license #> • catalogNumber #> • taxonConceptID #> • raw_scientificName #> • raw_vernacularName #> • scientificName #> • taxonRank #> • vernacularName #> • kingdom #> • phylum #> • class #> • order #> • family #> • genus #> • species #> • subspecies #> • institutionCode #> • collectionCode #> • raw_locality #> • raw_decimalLatitude #> • raw_decimalLongitude #> • raw_geodeticDatum #> • decimalLatitude #> • decimalLongitude #> • coordinatePrecision #> • coordinateUncertaintyInMeters #> • country #> • stateProvince #> • minimumElevationInMeters #> • maximumElevationInMeters #> • minimumDepthInMeters #> • maximumDepthInMeters #> • individualCount #> • recordedBy #> • year #> • month #> • day #> • verbatimEventDate #> • basisOfRecord #> • raw_basisOfRecord #> • sex #> • preparations #> • informationWithheld #> • dataGeneralizations #> • outlierLayer  assert_count <- colSums(xassert[,assertWarning$id]) assert_count[which(assert_count > 0)] #>                     COORDINATE_PRECISION_INVALID  #>                                              122  #>            COORDINATE_UNCERTAINTY_METERS_INVALID  #>                                              404  #>                      COUNTRY_COORDINATE_MISMATCH  #>                                                1  #>                 COUNTRY_DERIVED_FROM_COORDINATES  #>                                                2  #>                                   FIRST_OF_MONTH  #>                                               19  #>                            LOCATION_NOT_SUPPLIED  #>                                               13  #>                          MISSING_COLLECTION_DATE  #>                                               23  #>                            MISSING_GEODETICDATUM  #>                                              599  #>                        MISSING_GEOREFERENCE_DATE  #>                                              614  #>                          MISSING_GEOREFERENCEDBY  #>                                              614  #>                     MISSING_GEOREFERENCEPROTOCOL  #>                                              614  #>                      MISSING_GEOREFERENCESOURCES  #>                                              614  #>                                MISSING_TAXONRANK  #>                                              612  #>  OCCURRENCE_STATUS_INFERRED_FROM_BASIS_OF_RECORD  #>                                                2  #> OCCURRENCE_STATUS_INFERRED_FROM_INDIVIDUAL_COUNT  #>                                              384  #>                            RECORDED_DATE_INVALID  #>                                                2  #>                        STATE_COORDINATE_MISMATCH  #>                                              335  #>                         UNCERTAINTY_IN_PRECISION  #>                                              122"},{"path":"/articles/intro.html","id":"plotting-data-on-a-map","dir":"Articles","previous_headings":"Example 2: Get some data and work it out","what":"Plotting data on a map","title":"Introduction to sbdi4r2","text":"many ways producing spatial plots R, example using package sf.  leaflet package provides simple method producing browser-based maps panning, zooming, background layers:","code":"xf <- sbdi_call() |>    sbdi_identify(taxa) |>   atlas_occurrences() #> --    data(\"swe_wgs84\", package = \"sbdi4r2\", envir = environment())      plot(swe_wgs84[[\"Border\"]]$geometry, col = \"grey\", border = NA)    points(xf$decimalLongitude, xf$decimalLatitude, pch = 19, col = \"black\") library(sf) #> Warning: package 'sf' was built under R version 4.3.3  xf_sf <- xf |>    filter(!is.na(decimalLatitude),          !is.na(decimalLongitude)) |>    st_as_sf(coords = c(\"decimalLongitude\", \"decimalLatitude\"),             crs = 4326)  plot(swe_wgs84[[\"Border\"]]$geometry, col = \"grey\", border = NA)  plot(xf_sf$geometry, pch = 19, add = TRUE) library(leaflet) #> Warning: package 'leaflet' was built under R version 4.3.3 ## make a link to the web page for each occurrence popup_link <- paste0(\"<a href=\\\"https://records.biodiversitydata.se/occurrences/\",                       xf_sf$recordID,\"\\\">Link to occurrence record<\/a>\")  ## blank map, with imagery background m <- leaflet() |>     addProviderTiles(\"Esri.WorldImagery\") |>   addCircleMarkers(data = xf_sf ,                     radius = 2, fillOpacity = .5, opacity = 1,                    popup = popup_link) m"},{"path":"/articles/intro.html","id":"save-the-data","dir":"Articles","previous_headings":"Example 2: Get some data and work it out","what":"Save the data","title":"Introduction to sbdi4r2","text":"","code":"# save as data.frame Callitriche <- as.data.frame(xf)  # simplyfy data frame calli <- data.frame(Callitriche$scientificName,                     Callitriche$decimalLatitude,                     Callitriche$decimalLongitude) # simplify column names colnames(calli) <- c(\"species\",\"latitude\",\"longitude\") # remove rows with missing values (NAs) calli <- na.omit(calli)  # save as csv write.csv(calli, \"Callitriche.csv\")  # save as R specific format rds saveRDS(calli, \"Callitriche.rds\")"},{"path":"/articles/intro.html","id":"example-3-summarise-occurrences-over-a-defined-grid","dir":"Articles","previous_headings":"","what":"Example 3: Summarise occurrences over a defined grid","title":"Introduction to sbdi4r2","text":"Now, following data downloaded previous example, want summarise occurrences defined grid instead plotting every observation point. First need overlay observations grid. case, standard Swedish grids 50, 25, 10 5 km provided data (Coordinate Reference System WGS84 EPSG:4326). result ObsInGridList list object subset data grid.","code":"# load some shapes over Sweden # Political borders data(\"swe_wgs84\", package = \"sbdi4r2\", envir = environment())  # A standard 50km grid data(\"Sweden_Grid_50km_Wgs84\", package = \"sbdi4r2\", envir = environment())   grid <- Sweden_Grid_50km_Wgs84  ## overlay the data with the grid listGrid <- st_intersects(grid, xf_sf)  ObsInGridList <- list() for (i in seq(length(listGrid))) {   if (length(listGrid[[i]]) == 0) {     ObsInGridList[[i]] <- NA   } else {     ObsInGridList[[i]] <- st_drop_geometry(xf_sf[listGrid[[i]],])   } }  wNonEmpty <- which( unlist(lapply(ObsInGridList, function(x) !all(is.na(x)))) ) if (length(wNonEmpty) == 0) message(\"Observations don't overlap any grid cell.\")  ## a simple check of number of observations nObs <- nrow(xf_sf) sum(unlist(lapply(ObsInGridList, nrow))) == nObs #> [1] FALSE"},{"path":"/articles/intro.html","id":"summarise","dir":"Articles","previous_headings":"Example 3: Summarise occurrences over a defined grid","what":"Summarise","title":"Introduction to sbdi4r2","text":"Now let’s summarise occurrences within grid cells:","code":"## apply a summary over the grid nCells <- length(ObsInGridList)  res <- data.frame(\"nObs\" = as.numeric(rep(NA, nCells)),                   \"nYears\" = as.numeric(rep(NA, nCells)),                   row.names = row.names(grid),                   stringsAsFactors = FALSE)  cols2use <- c(\"scientificName\", \"eventDate\")  dataRes <- lapply(ObsInGridList[wNonEmpty], function(x){   x <- x[,cols2use]   x$year <- year(x$eventDate)   colnames(x) <- c(\"scientificName\", \"year\")      return(c(\"nObs\" = nrow(x),            \"nYears\" = length(unique(x[,\"year\"]))   )) })  dataRes <- as.data.frame(dplyr::bind_rows(dataRes, .id = \"id\"))  res[wNonEmpty,] <- dataRes[,-1] res$nObs <- as.numeric(res$nObs) resSf <- st_as_sf(cbind(res, st_geometry(grid)) ) rownames(resSf) <- grid$id"},{"path":"/articles/intro.html","id":"plotting-data-on-a-map-1","dir":"Articles","previous_headings":"Example 3: Summarise occurrences over a defined grid","what":"Plotting data on a map","title":"Introduction to sbdi4r2","text":"Finally plot grid summary map:","code":"palBW <- leaflet::colorNumeric(palette = c(\"white\", \"navyblue\"),                                domain = c(0, max(resSf$nObs, na.rm = TRUE)),                                 na.color = \"transparent\") oldpar <- par() par(mar = c(1,1,0,0)) plot(resSf$geometry, col = palBW(resSf$nObs), border = NA) plot(swe_wgs84$Border, border = 1, lwd = 1, add = T) legend(\"bottomleft\",         legend = round(seq(0, max(resSf$nObs, na.rm = TRUE), length.out = 5)),        col = palBW(seq(0, max(resSf$nObs, na.rm = TRUE), length.out = 5)),        title = \"Number of \\nobservations\", pch = 15, bty = \"n\") suppressWarnings(par(oldpar))"},{"path":"/articles/intro.html","id":"other-polygons","dir":"Articles","previous_headings":"Example 3: Summarise occurrences over a defined grid","what":"Other polygons","title":"Introduction to sbdi4r2","text":"set polygons also used summarise, example, counties. plotting map:","code":"counties <- swe_wgs84$Counties obs <- st_transform(xf_sf, crs = st_crs(counties))  ## overlay the data with the counties listGrid <- st_intersects(counties, obs)  ObsInCountyList <- list() for (i in seq(length(listGrid))) {   if (length(listGrid[[i]]) == 0) {     ObsInCountyList[[i]] <- NA   } else {     ObsInCountyList[[i]] <- st_drop_geometry(xf_sf[listGrid[[i]],])   } } wNonEmpty <- which( unlist(lapply(ObsInCountyList, function(x) !all(is.na(x)))) ) if (length(wNonEmpty) == 0) message(\"Observations don't overlap any grid cell.\")  ## check nObs sum(unlist(lapply(ObsInCountyList, nrow))) == nObs # some observations are not in the counties territory #> [1] FALSE length(ObsInCountyList) == nrow(counties) #> [1] TRUE  ## apply a summary over the grid nCells <- length(ObsInCountyList)  res <- data.frame(\"nObs\" = as.numeric(rep(NA, nCells)),                   \"nYears\" = as.numeric(rep(NA, nCells)),                   stringsAsFactors = FALSE)  cols2use <- c(\"scientificName\", \"eventDate\")  dataRes <- lapply(ObsInCountyList[wNonEmpty], function(x){   x <- x[,cols2use]   x$year <- year(x$eventDate)   colnames(x) <- c(\"scientificName\", \"year\")      return(c(\"nObs\" = nrow(x),            \"nYears\" = length(unique(x[,\"year\"]))   )) })  dataRes <- as.data.frame(dplyr::bind_rows(dataRes, .id = \"id\")) res[wNonEmpty,] <- dataRes[,-1] res$nObs <- as.numeric(res$nObs)  resSf <- st_as_sf(cbind(res, st_geometry(counties))) rownames(resSf) <- counties$LnNamn palBW <- leaflet::colorNumeric(c(\"white\", \"navyblue\"),                                 c(0, max(resSf$nObs, na.rm = TRUE)),                                 na.color = \"transparent\") oldpar <- par() par(mar = c(1,1,0,0)) plot(resSf$geometry, col = palBW(resSf$nObs), border = NA) plot(swe_wgs84$Border, border = 1, lwd = 1, add = T) text(st_coordinates(st_centroid(counties)),      labels = as.character(counties$LnNamn), font = 2, cex = .5 ) legend(\"bottomleft\",         legend = round(seq(0, max(resSf$nObs, na.rm = TRUE), length.out = 5)),        col = palBW(seq(0, max(resSf$nObs, na.rm = TRUE), length.out = 5)),        title = \"Number of \\nobservations\", pch = 15, bty = \"n\") suppressWarnings(par(oldpar))"},{"path":"/articles/intro.html","id":"add-the-county-name-to-each-observation","dir":"Articles","previous_headings":"Example 3: Summarise occurrences over a defined grid","what":"Add the county name to each observation","title":"Introduction to sbdi4r2","text":"Let’s try adding column observations data frame hold id overlapped polygon, case, Län (county) plot observation didn’t fall county.  clear image observations outside territorial extent country may within coastal areas reported Swedish institution outside country.","code":"countiesLab <- as.character(counties$LnNamn) obs$county <- countiesLab[as.integer(st_intersects(obs, counties))]  oldpar <- par() par(mar = c(1,1,0,0)) plot(counties$geometry, border = 1, lwd = 1) plot(obs$geometry[which(is.na(obs$county))],       pch = 19, cex = .5, col = \"red\", add = T) suppressWarnings(par(oldpar))"},{"path":"/articles/intro.html","id":"example-4-area-search-and-report-","dir":"Articles","previous_headings":"","what":"Example 4: Area search and report.","title":"Introduction to sbdi4r2","text":"Let’s now ask: listed species amphibians observed Örebro? Vector spatial layers (eg. polygons) can imported number different ways package helps pass polygons search. first step load vector spatial layer. Download .zip file different delimitation Sweden move somewhere like computer. recommend move working directory (getwd()). Extract .zip file named KommunSweref99.zip. work set valid file path, create object class sf. instead use data kindly provided package data(\"swe\"). One way many APIs take polygons search input s.k. WKT Well Known Text. can create WKT string using sf library: Unfortunately, instance gives WKT string long won’t accepted web service. Also, shapefile just got projected coordinate system SWEREF99 TM, web service accepts coordinates geodesic coordinate system WGS84. , let’s construct WKT string extra steps: Now extract species list polygon:","code":"shape <- st_read(dsn = file.path(\"your/path/to/file\", \"Kommun_Sweref99TM_region.shp\")) municipalities <- swe$Municipalities ## extract just the Municipality of Örebro shape <- municipalities |>    filter(KnNamn == \"Örebro\") wkt <- shape |>    st_geometry() |>    st_as_text() wkt <- shape |>    st_transform(crs = st_crs(4326)) |> # re project it to WGS84   st_convex_hull() |>  # extract the convex hull of the polygon to reduce the length of the WKT string    st_geometry() |>    st_as_text() # create WKT string sbdi_call() |>   sbdi_identify(\"amphibia\") |>   sbdi_geolocate(wkt) |>   filter(taxonRank == \"species\") |>    atlas_occurrences() |>    group_by(taxonConceptID, scientificName) |>    reframe(freq = n()) |>   arrange(freq) |>    htmlTable() #> [1] \"'arg' must be of length 1\""},{"path":"/articles/intro.html","id":"example-5-community-composition-and-turnover","dir":"Articles","previous_headings":"","what":"Example 5: Community composition and turnover","title":"Introduction to sbdi4r2","text":"example, let’s define area interest transect running westwards Stockholm region, download occurrences legumes (Fabaceae; large family flowering plants) area. want make sure include search value environmental variables sampled locations. Convert sites--species data.frame: end result: Now can start examine patterns data. Let’s plot richness function longitude:  Species richness function environment:  seem like higher species richness hottest areas. community composition change along transect? Use clustering:","code":"## A rough polygon around the Mällardalen wkt <- \"POLYGON((14.94 58.88, 14.94 59.69, 18.92 59.69, 18.92 58.88, 14.94 58.88))\"  ## define some environmental layers of interest # el10009 WorldClim Mean Temperature of Warmest Quarter https://spatial.biodiversitydata.se/ws/layers/view/more/worldclim_bio_10 # el10011 WorldClim Annual Precipitation https://spatial.biodiversitydata.se/ws/layers/view/more/worldclim_bio_12 env_layers <- c(\"el10009\",\"el10011\")   ## Download the data. x <- sbdi_call() |>   sbdi_identify(\"Fabaceae\") |>   sbdi_geolocate(wkt) |>   ## discard genus- and higher-level records   filter(taxonRank %in%            c(\"species\", \"subspecies\", \"variety\", \"form\", \"cultivar\")) |>    select(all_of(env_layers), taxonRank, group = \"basic\") |>    atlas_occurrences() library(tidyverse) xgridded <- x |>      mutate(longitude = round(decimalLongitude * 6)/6,             latitude = round(decimalLatitude * 6)/6,             el10009 = el10009 /10) |>      ## average environmental vars within each bin     group_by(longitude,latitude) |>      mutate(annPrec = mean(el10011, na.rm=TRUE),            meanTempWarmQuart = mean(el10009, na.rm=TRUE)) |>      ## subset to vars of interest     select(longitude, latitude, scientificName, annPrec, meanTempWarmQuart) |>      ## take one row per cell per species (presence)     distinct() |>      ## calculate species richness     mutate(richness = n()) |>      ## convert to wide format (sites by species)     mutate(present = 1) |>      do(spread(data =., key = scientificName, value = present, fill = 0)) |>      ungroup()  ## where a species was not present, it will have NA: convert these to 0 sppcols <- setdiff(names(xgridded),                    c(\"longitude\", \"latitude\",                       \"annPrec\", \"meanTempWarmQuart\",                      \"richness\")) xgridded <- xgridded |>    mutate_at(sppcols, function(z) ifelse(is.na(z), 0, z)) saveRDS(xgridded, file = \"vignette_fabaceae.rds\") xgridded[, 1:10] #> # A tibble: 142 × 10 #>    longitude latitude annPrec meanTempWarmQuart richness `Anthyllis vulneraria` #>        <dbl>    <dbl>   <dbl>             <dbl>    <int>                  <dbl> #>  1      15       58.8    633.              15.3       21                      1 #>  2      15       59      630.              15.4       39                      1 #>  3      15       59.2    634.              15.6       27                      1 #>  4      15       59.3    651.              15.4       43                      1 #>  5      15       59.5    676.              15.2       37                      1 #>  6      15       59.7    682.              15.2       15                      0 #>  7      15.2     58.8    631.              15.2       24                      1 #>  8      15.2     59      627.              15.4       38                      1 #>  9      15.2     59.2    626.              15.6       50                      1 #> 10      15.2     59.3    639.              15.7       53                      1 #> # ℹ 132 more rows #> # ℹ 4 more variables: `Anthyllis vulneraria subsp. carpatica` <dbl>, #> #   `Astragalus glycyphyllos` <dbl>, `Lathyrus linifolius` <dbl>, #> #   `Lathyrus pratensis` <dbl> library(ggplot2) ggplot(xgridded, aes(longitude, richness)) +    labs(x = \"Longitud (º)\",         y = \"Species richness\") +   lims(y = c(0,100)) +   geom_point() +    theme_bw() ggplot(xgridded, aes(meanTempWarmQuart, annPrec,                       colour = richness)) +   labs(x = \"Mean temperature of warmest quarter (ºC)\" ,         y = \"Annual precipitation (mm)\",        colour = \"Species \\nrichness\") +    scale_colour_distiller(palette = \"Spectral\") +   geom_point(size=3) +    theme_bw() library(vegan) ## Bray-Curtis dissimilarity D <- vegdist(xgridded[, sppcols], \"bray\") ## UPGMA clustering cl <- hclust(D, method = \"ave\") ## plot the dendrogram plot(cl) ## extract group labels at the 10-group level grp <- cutree(cl, 10) grp <- sapply(grp, function(z)which(unique(grp) == z)) ## renumber groups xgridded$grp <- as.factor(grp) ## plot ## colours for clusters thiscol <- c(\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\", \"#9467bd\", \"#8c564b\",               \"#e377c2\", \"#7f7f7f\", \"#bcbd22\", \"#17becf\") ggplot(xgridded, aes(longitude, latitude, colour = grp)) +    labs(x = \"Longitude\", y = \"Latitude\", colour = \"Group\") +    geom_point(size = 3) +   scale_colour_manual(values = thiscol) +    theme_bw() ## or a slightly nicer map plot library(maps) library(mapdata) oldpar <- par() par(mar = c(1,1,0,0)) map(\"worldHires\", \"Sweden\",      xlim = c(14.5, 20), ylim = c(58.8, 59.95),      col = \"gray90\", fill = TRUE) with(xgridded, points(longitude, latitude,                        pch = 21, col = thiscol[grp],                        bg = thiscol[grp], cex = 0.75)) suppressWarnings(par(oldpar))"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Debora Arlt. Author. Alejandro Ruete. Author. Manash Shah. Contributor, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Arlt D, Ruete (2024). sbdi4r2: Swedish Biodiversity Data Infrastructure Data Resources R. R package version 1.0.0, https://biodiversitydata-se.github.io/sbdi4r2/.","code":"@Manual{,   title = {sbdi4r2: Swedish Biodiversity Data Infrastructure Data and Resources in R},   author = {Debora Arlt and Alejandro Ruete},   year = {2024},   note = {R package version 1.0.0},   url = {https://biodiversitydata-se.github.io/sbdi4r2/}, }"},{"path":[]},{"path":"/index.html","id":"r-functionality-for-the-sbdi-data-portal","dir":"","previous_headings":"","what":"R functionality for the SBDI data portal","title":"Swedish Biodiversity Data Infrastructure Data and Resources in R","text":"Swedish Biodiversity Data Infrastructure (SBDI) provides tools enable users biodiversity information find, access, combine visualize data Swedish plants animals; available SBDI. R package sbdi4r2 provides subset tools, extension tools (found previously Analysportalen.se), directly used within R. sbdi4r2 enables R community directly access data resources hosted SBDI. goal enable observations species queried output range standard formats. tool built Atlas Living Australia platform wrapping galah package provides similar services ALA. Use-examples available package vignette , via (R): vignette(\"intro\"). questions please get contact us via support center.","code":""},{"path":"/index.html","id":"installing-sbdi4r2","dir":"","previous_headings":"","what":"Installing sbdi4r2","title":"Swedish Biodiversity Data Infrastructure Data and Resources in R","text":"package yet available CRAN therefore installed GitHub repository. R: development version GitHub: {r} install.packages(\"remotes\")  remotes::install_github(\"biodiversitydata-se/sbdi4r2\")","code":""},{"path":"/index.html","id":"windows","dir":"","previous_headings":"Installing sbdi4r2","what":"Windows","title":"Swedish Biodiversity Data Infrastructure Data and Resources in R","text":"see error “ERROR: lazy loading failed package ‘sbdi4r2’”, may due trying install network location. Try instead install local location: first create local location want use, specify location installing, later loading package: {r} install_github(\"biodiversitydata-se/sbdi4r2\", lib = \"C:/pathname/MyLibrary\") library(sbdi4r2, lib.loc = \"C:/pathname/MyLibrary\")","code":""},{"path":"/index.html","id":"mac","dir":"","previous_headings":"Installing sbdi4r2","what":"Mac","title":"Swedish Biodiversity Data Infrastructure Data and Resources in R","text":"see error failure set default locale, need manually set : {r} system('defaults write org.R-project.R force.LANG en_US.UTF-8') restart R. information can found CRAN R Mac page.","code":""},{"path":"/index.html","id":"linux","dir":"","previous_headings":"Installing sbdi4r2","what":"Linux","title":"Swedish Biodiversity Data Infrastructure Data and Resources in R","text":"First, ensure libcurl installed system — e.g. Ubuntu, open terminal : sudo apt-get install libcurl4-openssl-dev install libcurl4-openssl-dev via Software Centre. , R shown .","code":""},{"path":"/index.html","id":"using-sbdi4r2","dir":"","previous_headings":"","what":"Using sbdi4r2","title":"Swedish Biodiversity Data Infrastructure Data and Resources in R","text":"sbdi4r2 package must loaded new R session library(sbdi4r2), specifying local location library(sbdi4r2, lib.loc = \"C:/pathname/MyLibrary\").","code":""},{"path":"/index.html","id":"customizing-sbdi4r2","dir":"","previous_headings":"","what":"Customizing sbdi4r2","title":"Swedish Biodiversity Data Infrastructure Data and Resources in R","text":"Various aspects sbdi4r2 package can customized.","code":""},{"path":"/index.html","id":"e-mail-address","dir":"","previous_headings":"Customizing sbdi4r2","what":"E-mail address","title":"Swedish Biodiversity Data Infrastructure Data and Resources in R","text":"download request SBDI servers also accompanied “e-mail address” string identifies user making request. need provide email address registered SBDI. can create account . email registered SBDI, stored config: {r} sbdi_config(email = \".valid@emailaddress.com\")","code":""},{"path":"/index.html","id":"debugging","dir":"","previous_headings":"Customizing sbdi4r2","what":"Debugging","title":"Swedish Biodiversity Data Infrastructure Data and Resources in R","text":"things aren’t working expected, detail (particularly web requests caching behaviour) can obtained setting verbose configuration option: {r} sbdi_config(verbose = TRUE)","code":""},{"path":"/index.html","id":"setting-the-download-reason","dir":"","previous_headings":"Customizing sbdi4r2","what":"Setting the download reason","title":"Swedish Biodiversity Data Infrastructure Data and Resources in R","text":"SBDI requires provide reason downloading occurrence data (via sbdi4r2 occurrences() function). can provide parameter directly call occurrences(), can set per session using: {r} sbdi_config(download_reason_id = \"your_reason_id\") (See sbdi_reasons() valid download reasons, e.g. download_reason_id=10 “testing”, 7 “ecological research”, 8 “systematic research/taxonomy”, 3 “education”)","code":""},{"path":[]},{"path":"/reference/sbdi4r2.html","id":null,"dir":"Reference","previous_headings":"","what":"Biodiversity Data from the GBIF Node Network sbdi4r2 — sbdi4r2","title":"Biodiversity Data from the GBIF Node Network sbdi4r2 — sbdi4r2","text":"project enables R community access data tools hosted Swedish Biodiversity Data Infrastructure (SBDI). goal project enable basic species related information queried output standard formats R. `sbdi4r2` based around extensive web services provided Swedish Biodiversity Data Infrastructure; see API link . Global Biodiversity Information Facility (GBIF; <https://www.gbif.org>) provides tools enable users find, access, combine visualise biodiversity data. `sbdi4r2` (via `galah`) enables R community directly access data resources hosted GBIF several subsidiary organisations, known 'nodes'. basic unit observation stored infrastructures **occurrence** record, based Darwin Core' data standard (<https://dwc.tdwg.org>); however `galah` also enables users locate download taxonomic information, associated media images sounds, restricting queries particular taxa locations. Users can specify columns returned query, restrict results observations meet particular quality-control criteria.","code":""},{"path":"/reference/sbdi4r2.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Biodiversity Data from the GBIF Node Network sbdi4r2 — sbdi4r2","text":"**Piping functions** * [sbdi_call()] request_() et al.  Start build data query   * collapse() Generate query   * compute() Compute query   * collect() Retrieve database query **Look information** * [search_taxa()] Search taxa using text-search   * [search_identifiers()] Search taxa using taxonomic identifiers   * [show_all()] & [search_all()] Data generating filter queries   * [show_values()] & [search_values()] Show search values _within_   `fields`, `profiles`, `lists`, `collections`, `datasets` `providers` **Lazy data manipulation** * identify() [sbdi_identify()] Search taxonomic identifiers   * filter() [sbdi_filter()]Filter records   * select() [sbdi_select()]Fields report information   * group_by() [sbdi_group_by()] Fields group counts   * st_crop() [sbdi_geolocate()] Specify location   * [apply_profile()] [sbdi_apply_profile()] Restrict data pass predefined checks (ALA )   * slice_head() Choose first n rows download   * arrange() Arrange rows query server side **Download data** * [atlas_occurrences()] Download occurrence records   * [atlas_counts()] count() Count number records species returned query   * [atlas_species()] Download species lists   * [atlas_taxonomy()] Return section ALA taxonomic tree   * [atlas_media()] View images sounds available download   * [collect_media()] Download images sounds **Configure session** * [sbdi_config()] Package configuration options **Cite** * [atlas_citation()] Citation dataset","code":""},{"path":"/reference/sbdi4r2.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Biodiversity Data from the GBIF Node Network sbdi4r2 — sbdi4r2","text":"https://api.biodiversitydata.se/","code":""},{"path":[]},{"path":"/reference/sbdi4r2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Biodiversity Data from the GBIF Node Network sbdi4r2 — sbdi4r2","text":"Maintainer: Manash Shah support@biodiversitydata.se [contributor] Authors: Debora Arlt Alejandro Ruete","code":""},{"path":"/reference/sbdi_apply_profile.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a data quality profile — sbdi_apply_profile","title":"Apply a data quality profile — sbdi_apply_profile","text":"'profile' group filters pre-applied ALA. Using data profile allows query filtered quickly relevant quality-assured data fit--purpose. example, \"ALA\" profile designed exclude lower quality records, whereas profiles apply filters specific species distribution modelling (e.g. CDSM).","code":""},{"path":"/reference/sbdi_apply_profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a data quality profile — sbdi_apply_profile","text":"","code":"sbdi_apply_profile(...)"},{"path":"/reference/sbdi_apply_profile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a data quality profile — sbdi_apply_profile","text":"... profile name. `string` - name abbreviation data quality profile apply query. Valid values can seen using `show_all(profiles)`","code":""},{"path":"/reference/sbdi_apply_profile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a data quality profile — sbdi_apply_profile","text":"tibble containing valid data profile value.","code":""},{"path":"/reference/sbdi_apply_profile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply a data quality profile — sbdi_apply_profile","text":"Note one profile can loaded time; multiple profiles given, first valid profile used. bespoke editing filters within profile, use [sbdi_filter()]","code":""},{"path":[]},{"path":"/reference/sbdi_apply_profile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a data quality profile — sbdi_apply_profile","text":"","code":"if (FALSE) { # Apply a data quality profile to a query sbdi_call() |>   sbdi_identify(\"reptilia\") |>     filter(year == 2021) |>       sbdi_apply_profile(ALA) |>         atlas_counts()  }"},{"path":"/reference/sbdi_call.html","id":null,"dir":"Reference","previous_headings":"","what":"Start building a query — sbdi_call","title":"Start building a query — sbdi_call","text":"download data selected atlas, one must construct query. query tells atlas API data download return, well filtered. Using `sbdi_call()` allows build piped query download data, way wrangle data `dplyr` `tidyverse`. `sbdi_call()` wrapper group underlying `request_` functions `galah` package. functions can begin piped query end `collapse()`, `compute()` `collect()`. underlying `request_` #' functions useful allow `sbdi4r2` `galah` separate different types requests perform better. example, `filter.data_request` translates filters R `solr`, whereas `filter.metadata_request` searches using search term. details see object-oriented programming vignette: vignette(\"object_oriented_programming\", package = \"galah\")","code":""},{"path":"/reference/sbdi_call.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Start building a query — sbdi_call","text":"","code":"sbdi_call(method = c(\"data\", \"metadata\", \"files\"), type, ...)"},{"path":"/reference/sbdi_call.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Start building a query — sbdi_call","text":"method string: `request` function called. one `\"data\"` (default), `\"metadata\"` `\"files\"` type string: form data returned? Acceptable values specified corresponding `request` function ... Zero arguments alter query. See 'details'.","code":""},{"path":"/reference/sbdi_call.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Start building a query — sbdi_call","text":"sub-function returns different object class: `request_data()` returns `data_request`. `request_metadata` returns `metadata_request`, `request_files()` returns `files_request`.","code":""},{"path":"/reference/sbdi_call.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Start building a query — sbdi_call","text":"atlas several types data can chosen. Currently supported `\"occurrences\"` (default), `\"species\"` (`\"media\"` ALA). also possible use  `type = \"occurrences-count\"` `type = \"species-count\"`; practice synonymous `sbdi_call() |> count()`, therefore practically useful debugging (via `collapse()` `compute()`). named arguments supported via `...`. practice, functions `sbdi_` prefix (`galah_` matter) S3 methods ported `dplyr` assign information correct slots internally. Overwriting user-defined alternatives possible, advised. Accepted arguments : - `filter` (accepts `sbdi_filter()` filter())  - `select` (accepts `sbdi_select()` select)  - `group_by` (accepts `sbdi_group_by()` group_by())  - `identify` (accepts `sbdi_identify()` identify())  - `geolocate` (accepts `sbdi_geolocate()`, `sbdi_polygon()` `sbdi_bbox()`    st_crop())  - `limit` (accepts slice_head())  - `doi` (accepts sting listing valid DOI, specific `collect()` `type = \"doi\"`) Unrecognised names ignored `collect()` related functions.","code":""},{"path":[]},{"path":"/reference/sbdi_call.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Start building a query — sbdi_call","text":"","code":"if (FALSE) { # Begin your query with `sbdi_call()`, then pipe using `%>%` or `|>`  # Get number of records of *Aves* from 2001 to 2004 by year sbdi_call() |>   sbdi_identify(\"Aves\") |>   sbdi_filter(year > 2000 & year < 2005) |>   sbdi_group_by(year) |>   atlas_counts()  # Get information for all species in *Cacatuidae* family sbdi_call() |>   sbdi_identify(\"Cacatuidae\") |>   atlas_species()  # Download records of genus *Eolophus* from 2001 to 2004 sbdi_config(email = \"your-email@email.com\")  sbdi_call() |>   sbdi_identify(\"Eolophus\") |>   sbdi_filter(year > 2000 & year < 2005) |>   atlas_occurrences()  }"},{"path":"/reference/sbdi_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set configuration options that control sbdi4r2 behavior — sbdi_config","title":"Get or set configuration options that control sbdi4r2 behavior — sbdi_config","text":"Get set configuration options control sbdi4r2 behavior List valid download reasons","code":""},{"path":"/reference/sbdi_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set configuration options that control sbdi4r2 behavior — sbdi_config","text":"","code":"sbdi_config(atlas = \"SBDI\", ...)  sbdi_reasons()"},{"path":"/reference/sbdi_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set configuration options that control sbdi4r2 behavior — sbdi_config","text":"atlas string: Living Atlas point , SBDI default. Can organisation name,  acronym, region (see [show_all_atlases()] admissible values). ... Options can defined using form `name = \"value\"`. Valid arguments : *  `api-key` string: registered API key (currently unused). *  `directory` string: directory use cache.  default temporary directory, means results  cached within R session cleared automatically user exits R.  user may wish set non-temporary directory  caching across sessions. directory must exist file system. *  `download_reason_id` numeric string: \"download reason\" required  ALA services, either numeric ID (currently 0--13)  string (see `show_all(reasons)` list valid ID codes  names). default NA. ALA services require valid  download_reason_id code, either specified directly  associated R function. *  `email` string: email address registered chosen  atlas. SBDI, can register  [address](https://auth.biodiversitydata.se/userdetails/registration/createAccount). *  `password` string: registered password (GBIF ) *  `run_checks` logical: `sbdi4r2` run checks filters  columns. making lots requests sequentially, checks can slow  process lead HTTP 500 errors, turned . Defaults  TRUE. *  `send_email` logical: receive email query  [atlas_occurrences()]? Defaults `FALSE`; can  useful instances, example tracking DOIs assigned  specific downloads later citation. *  `username` string: registered username (GBIF ) *  `verbose` logical: `sbdi4r2` give verbose progress bars? Defaults FALSE.","code":""},{"path":"/reference/sbdi_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set configuration options that control sbdi4r2 behavior — sbdi_config","text":"`sbdi_config()`, `list` options. `sbdi_config(...)` called arguments, nothing returned configuration set.","code":""},{"path":"/reference/sbdi_config.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get or set configuration options that control sbdi4r2 behavior — sbdi_config","text":"https://api.biodiversitydata.se/ https://spatial.biodiversitydata.se/layers/ eventually move api link #' `sbdi4r2` package (via `galah` package) supports large data downloads, also interfaces SBDI requires users services provide registered email address reason downloading data. `sbdi_config` function provides way manage issues simply possible. Invoking sbdi_config() arguments returns list current values options. sbdi_reasons() returns data frame information describing valid options download_reason_id","code":""},{"path":"/reference/sbdi_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set configuration options that control sbdi4r2 behavior — sbdi_config","text":"","code":"if (FALSE) { # To download occurrence records, enter your email in `sbdi_config()`. # This email should be registered with the atlas in question. sbdi_config(email = \"your-email@email.com\")  # Some ALA services require that you add a reason for downloading data. # Add your selected reason using the option `download_reason_id` sbdi_config(download_reason_id = 0)  # To look up all valid reasons to enter, use `show_all(reasons)` # show_all(reasons) or simply `show_reasons()`  # Make debugging in your session easier by setting `verbose = TRUE` sbdi_config(verbose = TRUE) }"},{"path":"/reference/sbdi_geolocate.html","id":null,"dir":"Reference","previous_headings":"","what":"Narrow a query to within a specified area — sbdi_geolocate","title":"Narrow a query to within a specified area — sbdi_geolocate","text":"Restrict results specified area using `sbdi_geolocate()`. Areas can specified either polygons bounding boxes, depending `type`. Alternatively, users can call underlying functions directly via `sbdi_bbox()` `sbdi_polygon()`. Finally, possible use `sf` syntax calling `st_crop()`, synonymous `sbdi_polygon()`.","code":""},{"path":"/reference/sbdi_geolocate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Narrow a query to within a specified area — sbdi_geolocate","text":"","code":"sbdi_geolocate(..., type = c(\"polygon\", \"bbox\"))  sbdi_polygon(...)  sbdi_bbox(...)"},{"path":"/reference/sbdi_geolocate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Narrow a query to within a specified area — sbdi_geolocate","text":"... single `sf` object, WKT string shapefile. Bounding boxes can supplied `tibble`/`data.frame` `bbox` type `string`: one `c(\"polygon\", \"bbox\")`. Defaults `\"polygon\"`. `type = \"polygon\"`, multipolygon built via [sbdi_polygon()]. `type = \"bbox\"`, multipolygon built via [sbdi_bbox()]. multipolygon used narrow query ALA.","code":""},{"path":"/reference/sbdi_geolocate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Narrow a query to within a specified area — sbdi_geolocate","text":"length-1 string (class `character`) containing multipolygon WKT string representing area provided.","code":""},{"path":"/reference/sbdi_geolocate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Narrow a query to within a specified area — sbdi_geolocate","text":"calling `sbdi_geolocate()`, default `type` `\"polygon\"`, narrows queries within area supplied `POLYGON`. Polygons must specified either `sf` object, 'well-known text' (WKT) string, shapefile. Shapefiles must simple accepted ALA. Alternatively, set `type = \"bbox\"` narrow queries within bounding box. Bounding boxes can extracted supplied `sf` object shapefile. bounding box can also supplied `bbox` object (via `sf::st_bbox()`) `tibble`/`data.frame`. `type = \"polygon\"`, WKT strings longer 10000 characters `sf` objects 500 vertices accepted ALA. polygons  may need simplified. `type = \"bbox\"`, sf objects shapefiles converted bounding box query ALA.","code":""},{"path":"/reference/sbdi_geolocate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Narrow a query to within a specified area — sbdi_geolocate","text":"","code":"if (FALSE) { # Search for records within a polygon using a shapefile location <- sf::st_read(\"path/to/shapefile.shp\") sbdi_call() |>   sbdi_identify(\"vulpes\") |>   sbdi_geolocate(location) |>   atlas_counts()  # Search for records within the bounding box of a shapefile location <- sf::st_read(\"path/to/shapefile.shp\") sbdi_call() |>   sbdi_identify(\"vulpes\") |>   sbdi_geolocate(location, type = \"bbox\") |>   atlas_counts()  # Search for records within a polygon using an `sf` object location <- \"POLYGON((142.3 -29.0,142.7 -29.1,142.7 -29.4,142.3 -29.0))\" |>  sf::st_as_sfc() sbdi_call() |>   sbdi_identify(\"reptilia\") |>   sbdi_polygon(location) |>   atlas_counts()  # Alternatively, we can use `st_crop()` as a synonym for `sbdi_polygon()`. # Hence the above example can be rewritten as: request_data() |>   identify(\"reptilia\") |>   st_crop(location) |>   count() |>   collect()  # Search for records using a Well-known Text string (WKT) wkt <- \"POLYGON((142.3 -29.0,142.7 -29.1,142.7 -29.4,142.3 -29.0))\" sbdi_call() |>   sbdi_identify(\"vulpes\") |>   sbdi_geolocate(wkt) |>   atlas_counts()  # Search for records within the bounding box extracted from an `sf` object location <- \"POLYGON((142.3 -29.0,142.7 -29.1,142.7 -29.4,142.3 -29.0))\" |>   sf::st_as_sfc() sbdi_call() |>   sbdi_identify(\"vulpes\") |>   sbdi_geolocate(location, type = \"bbox\") |>   atlas_counts()  # Search for records using a bounding box of coordinates b_box <- sf::st_bbox(c(xmin = 143, xmax = 148, ymin = -29, ymax = -28),                      crs = sf::st_crs(\"WGS84\")) sbdi_call() |>   sbdi_identify(\"reptilia\") |>   sbdi_geolocate(b_box, type = \"bbox\") |>   atlas_counts()  # Search for records using a bounding box in a `tibble` or `data.frame` b_box <- tibble::tibble(xmin = 148, ymin = -29, xmax = 143, ymax = -21) sbdi_call() |>   sbdi_identify(\"vulpes\") |>   sbdi_geolocate(b_box, type = \"bbox\") |>   atlas_counts() }"},{"path":"/reference/sbdi_group_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify fields to group when downloading record counts — sbdi_group_by","title":"Specify fields to group when downloading record counts — sbdi_group_by","text":"`count.data_request()` `atlas_counts()` support server-side grouping data. Grouping can used return record counts grouped multiple, valid fields (found `search_all(fields)`).","code":""},{"path":"/reference/sbdi_group_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify fields to group when downloading record counts — sbdi_group_by","text":"","code":"sbdi_group_by(...)"},{"path":"/reference/sbdi_group_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify fields to group when downloading record counts — sbdi_group_by","text":"... zero individual column names include","code":""},{"path":"/reference/sbdi_group_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify fields to group when downloading record counts — sbdi_group_by","text":"arguments provided, returns `data.frame` columns `name` `type`, per [select.data_request()].","code":""},{"path":"/reference/sbdi_group_by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify fields to group when downloading record counts — sbdi_group_by","text":"","code":"if (FALSE) { sbdi_call() |>   sbdi_group_by(basisOfRecord) |>   atlas_counts() }"},{"path":"/reference/sbdi_identify.html","id":null,"dir":"Reference","previous_headings":"","what":"Narrow a query by passing taxonomic identifiers — sbdi_identify","title":"Narrow a query by passing taxonomic identifiers — sbdi_identify","text":"conducting search creating data query, common identify known taxon group taxa narrow records results returned.","code":""},{"path":"/reference/sbdi_identify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Narrow a query by passing taxonomic identifiers — sbdi_identify","text":"","code":"sbdi_identify(...)"},{"path":"/reference/sbdi_identify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Narrow a query by passing taxonomic identifiers — sbdi_identify","text":"... One scientific names.","code":""},{"path":"/reference/sbdi_identify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Narrow a query by passing taxonomic identifiers — sbdi_identify","text":"tibble containing identified taxa.","code":""},{"path":"/reference/sbdi_identify.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Narrow a query by passing taxonomic identifiers — sbdi_identify","text":"`sbdi_identify()` used identify taxa want returned search data query. Users pass scientific names taxonomic identifiers pipes provide data biological group interest. good use [search_taxa()] [search_identifiers()] first check taxa provide `sbdi_identify()` return correct results.","code":""},{"path":[]},{"path":"/reference/sbdi_identify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Narrow a query by passing taxonomic identifiers — sbdi_identify","text":"","code":"if (FALSE) { # Specify a taxon. A valid taxon will return an identifier. sbdi_identify(\"reptilia\")  # Specify more than one taxon at a time. sbdi_identify(\"reptilia\", \"mammalia\", \"aves\", \"pisces\")  # Use `sbdi_identify()` to narrow your queries sbdi_call() |>   sbdi_identify(\"Eolophus\") |>   atlas_counts()  # Within a pipe, `identify()` and `sbdi_identify()` are synonymous. # hence the following is identical to the previous example: request_data() |>   identify(\"Eolophus\") |>   count() |>   collect()  # If you know a valid taxon identifier, use `sbdi_filter()` instead. id <- \"https://biodiversity.org.au/afd/taxa/009169a9-a916-40ee-866c-669ae0a21c5c\" sbdi_call() |>   sbdi_filter(lsid == id) |>   atlas_counts() }"},{"path":"/reference/sbdi_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify fields for occurrence download — sbdi_select","title":"Specify fields for occurrence download — sbdi_select","text":"GBIF partner nodes store content hundreds different fields, users often require thousands millions records time. reduce time taken download data, limit complexity resulting `tibble`, sensible restrict fields returned [atlas_occurrences()]. function allows easy selection fields, commonly-requested groups columns, following syntax shared `dplyr::select()`. full list available fields can viewed `show_all(fields)`. Note `select()` `sbdi_select()` supported atlases allow downloads, exception GBIF, columns returned.","code":""},{"path":"/reference/sbdi_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify fields for occurrence download — sbdi_select","text":"","code":"sbdi_select(..., group)"},{"path":"/reference/sbdi_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify fields for occurrence download — sbdi_select","text":"... zero individual column names include group `string`: (optional) name one column groups include. Valid options `\"basic\"`, `\"event\"` `\"media\"` `\"assertions\"`","code":""},{"path":"/reference/sbdi_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify fields for occurrence download — sbdi_select","text":"tibble specifying name type column include call `atlas_counts()` `atlas_occurrences()`.","code":""},{"path":"/reference/sbdi_select.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Specify fields for occurrence download — sbdi_select","text":"Calling argument `group = \"basic\"` returns following columns: * `decimalLatitude`   * `decimalLongitude`   * `eventDate`   * `scientificName`   * `taxonConceptID`   * `recordID`   * `dataResourceName`   * `occurrenceStatus` Using `group = \"event\"` returns following columns: * `eventRemarks`   * `eventTime`   * `eventID`   * `eventDate`   * `samplingEffort`   * `samplingProtocol` Using `group = \"media\"` returns following columns: * `multimedia`   * `multimediaLicence`   * `images`   * `videos`   * `sounds` Using `group = \"assertions\"` returns quality assertion-related columns. list assertions shown `show_all_assertions()`.","code":""},{"path":[]},{"path":"/reference/sbdi_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify fields for occurrence download — sbdi_select","text":"","code":"if (FALSE) { # Download occurrence records of *Perameles*, # Only return scientificName and eventDate columns sbdi_config(email = \"your-email@email.com\") sbdi_call() |>   sbdi_identify(\"perameles\")|>   sbdi_select(scientificName, eventDate) |>   atlas_occurrences()  # Only return the \"basic\" group of columns and the basisOfRecord column sbdi_call() |>   sbdi_identify(\"perameles\") |>   sbdi_select(basisOfRecord, group = \"basic\") |>   atlas_occurrences()  # When used in a pipe, `sbdi_select()` and `select()` are synonymous. # Hence the previous example can be rewritten as: request_data() |>   identify(\"perameles\") |>   select(basisOfRecord, group = \"basic\") |>   collect() }"},{"path":"/reference/swe.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic Sweden polygons for visualization — swe","title":"Basic Sweden polygons for visualization — swe","text":"basic polygon data set Simple Feature Collection (package sf) representing Sweden. basic polygon data set Simple Feature Collection (package sf) representing Sweden.","code":""},{"path":"/reference/swe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic Sweden polygons for visualization — swe","text":"","code":"data(swe)  data(swe_wgs84)"},{"path":"/reference/swe.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Basic Sweden polygons for visualization — swe","text":"list Simple Feature Collection (package sf) CRS: EPSG:3006","code":""},{"path":"/reference/swe.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Basic Sweden polygons for visualization — swe","text":"Statistikmyndigheten SCB https://www.scb.se/hitta-statistik/regional-statistik-och-kartor/regionala-indelningar/digitala-granser","code":""},{"path":"/reference/Sweden_Grid.html","id":null,"dir":"Reference","previous_headings":"","what":"The standard Swedish squared grid — Sweden_Grid","title":"The standard Swedish squared grid — Sweden_Grid","text":"5, 10, 25 50 km wide grid data set Simple Feature Collection (package sf) Sweden.","code":""},{"path":"/reference/Sweden_Grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The standard Swedish squared grid — Sweden_Grid","text":"","code":"data(Sweden_Grid_5km_Wgs84)  data(Sweden_Grid_10km_Wgs84)  data(Sweden_Grid_25km_Wgs84)  data(Sweden_Grid_50km_Wgs84)"},{"path":"/reference/Sweden_Grid.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"The standard Swedish squared grid — Sweden_Grid","text":"Simple Feature Collection (package sf) CRS: EPSG:4326","code":""},{"path":"/reference/Sweden_Grid.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"The standard Swedish squared grid — Sweden_Grid","text":"https://github.com/biodiversitydata-se/Sweden_Grids","code":""}]
